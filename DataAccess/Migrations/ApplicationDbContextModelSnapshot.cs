// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.Entities.Concrete.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34245a4d-0baa-4c22-8245-02abb9063b11"),
                            Description = "Category1 Description",
                            DisplayOrder = 1,
                            ImageUrl = "",
                            Name = "Category1"
                        },
                        new
                        {
                            Id = new Guid("76d6be2f-8d6c-4e93-94cc-4eb0341950bc"),
                            Description = "Category2 Description",
                            DisplayOrder = 2,
                            ImageUrl = "",
                            Name = "Category2"
                        },
                        new
                        {
                            Id = new Guid("db9b235f-a5d6-49dc-8e95-022f443f8582"),
                            Description = "Category3 Description",
                            DisplayOrder = 3,
                            ImageUrl = "",
                            Name = "Category3"
                        },
                        new
                        {
                            Id = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Description = "Category4 Description",
                            DisplayOrder = 4,
                            ImageUrl = "",
                            Name = "Category4"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc25bafb-40d3-4f4c-9a26-f2f14c34ad9c"),
                            Address = "Beşiktaş",
                            City = "Istanbul",
                            Country = "Turkiye",
                            Email = "salemarkt@salemarkt.com",
                            Name = "SaleMarkt",
                            PhoneNumber = "1234567890",
                            PostalCode = "34000"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Models.Entities.Concrete.OrderHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("Models.Entities.Concrete.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf8523a5-79cb-4c6d-affc-ee99942906d1"),
                            CategoryId = new Guid("34245a4d-0baa-4c22-8245-02abb9063b11"),
                            Color = "Red",
                            Description = "Product 1 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 99.0,
                            Price = 90.0,
                            Price100 = 80.0,
                            Price50 = 85.0,
                            Size = "M",
                            Title = "Product 1"
                        },
                        new
                        {
                            Id = new Guid("327353b3-04ee-411b-a096-24980fa107ba"),
                            CategoryId = new Guid("76d6be2f-8d6c-4e93-94cc-4eb0341950bc"),
                            Color = "Blue",
                            Description = "Product 2 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 40.0,
                            Price = 30.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Size = "S",
                            Title = "Product 2"
                        },
                        new
                        {
                            Id = new Guid("69ebc18b-c821-4ade-9790-04f8fc510146"),
                            CategoryId = new Guid("db9b235f-a5d6-49dc-8e95-022f443f8582"),
                            Color = "Green",
                            Description = "Product 3 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 55.0,
                            Price = 50.0,
                            Price100 = 35.0,
                            Price50 = 40.0,
                            Size = "L",
                            Title = "Product 3"
                        },
                        new
                        {
                            Id = new Guid("938d8e64-db0e-4390-b7d2-582810774755"),
                            CategoryId = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Color = "Black",
                            Description = "Product 4 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Size = "XL",
                            Title = "Product 4"
                        },
                        new
                        {
                            Id = new Guid("2f36eefc-89d9-49c1-9ebf-be97db6870e0"),
                            CategoryId = new Guid("db9b235f-a5d6-49dc-8e95-022f443f8582"),
                            Color = "White",
                            Description = "Product 5 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 30.0,
                            Price = 27.0,
                            Price100 = 20.0,
                            Price50 = 25.0,
                            Size = "M",
                            Title = "Product 5"
                        },
                        new
                        {
                            Id = new Guid("b4591371-41d8-48fd-990f-e5c4f3b89ad8"),
                            CategoryId = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Color = "Yellow",
                            Description = "Product 6 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 25.0,
                            Price = 23.0,
                            Price100 = 20.0,
                            Price50 = 22.0,
                            Size = "L",
                            Title = "Product 6"
                        },
                        new
                        {
                            Id = new Guid("7e02241b-fc68-4bd8-b601-8f09bf049f94"),
                            CategoryId = new Guid("34245a4d-0baa-4c22-8245-02abb9063b11"),
                            Color = "Red",
                            Description = "Product 7 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 60.0,
                            Price = 55.0,
                            Price100 = 45.0,
                            Price50 = 50.0,
                            Size = "S",
                            Title = "Product 7"
                        },
                        new
                        {
                            Id = new Guid("83240dc5-6012-425b-9c35-5176a8b55f9b"),
                            CategoryId = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Color = "Blue",
                            Description = "Product 8 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 45.0,
                            Price = 40.0,
                            Price100 = 35.0,
                            Price50 = 38.0,
                            Size = "M",
                            Title = "Product 8"
                        },
                        new
                        {
                            Id = new Guid("503f1008-d44f-49cf-b528-9de7b4078c54"),
                            CategoryId = new Guid("76d6be2f-8d6c-4e93-94cc-4eb0341950bc"),
                            Color = "Green",
                            Description = "Product 9 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 70.0,
                            Price = 65.0,
                            Price100 = 55.0,
                            Price50 = 60.0,
                            Size = "L",
                            Title = "Product 9"
                        },
                        new
                        {
                            Id = new Guid("1b8fe840-2751-4282-b41c-0beb710b1f45"),
                            CategoryId = new Guid("76d6be2f-8d6c-4e93-94cc-4eb0341950bc"),
                            Color = "Black",
                            Description = "Product 10 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 35.0,
                            Price = 32.0,
                            Price100 = 28.0,
                            Price50 = 30.0,
                            Size = "XL",
                            Title = "Product 10"
                        },
                        new
                        {
                            Id = new Guid("72623fd5-7860-4a98-838f-f773773d5de9"),
                            CategoryId = new Guid("db9b235f-a5d6-49dc-8e95-022f443f8582"),
                            Color = "White",
                            Description = "Product 11 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 25.0,
                            Price = 23.0,
                            Price100 = 19.0,
                            Price50 = 21.0,
                            Size = "S",
                            Title = "Product 11"
                        },
                        new
                        {
                            Id = new Guid("40c72ab7-31ac-4814-be33-b7232e8e44e9"),
                            CategoryId = new Guid("db9b235f-a5d6-49dc-8e95-022f443f8582"),
                            Color = "Yellow",
                            Description = "Product 12 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 50.0,
                            Price = 45.0,
                            Price100 = 40.0,
                            Price50 = 42.0,
                            Size = "M",
                            Title = "Product 12"
                        },
                        new
                        {
                            Id = new Guid("560f45eb-1d1c-4024-b6ac-6b54a1bb68ea"),
                            CategoryId = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Color = "Red",
                            Description = "Product 13 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 40.0,
                            Price = 38.0,
                            Price100 = 32.0,
                            Price50 = 35.0,
                            Size = "L",
                            Title = "Product 13"
                        },
                        new
                        {
                            Id = new Guid("9cad99c8-412d-4c88-abb5-0ccd311853b0"),
                            CategoryId = new Guid("34245a4d-0baa-4c22-8245-02abb9063b11"),
                            Color = "Blue",
                            Description = "Product 14 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 55.0,
                            Price = 52.0,
                            Price100 = 48.0,
                            Price50 = 50.0,
                            Size = "XL",
                            Title = "Product 14"
                        },
                        new
                        {
                            Id = new Guid("aeaa8536-d241-41af-95a6-c900c3527437"),
                            CategoryId = new Guid("8179ed4d-7e5b-49c4-33f3-08dbc21909ac"),
                            Color = "Green",
                            Description = "Product 15 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 70.0,
                            Price = 68.0,
                            Price100 = 60.0,
                            Price50 = 65.0,
                            Size = "S",
                            Title = "Product 15"
                        },
                        new
                        {
                            Id = new Guid("fbe600cf-1fee-4402-87c8-aacd627fcbd3"),
                            CategoryId = new Guid("76d6be2f-8d6c-4e93-94cc-4eb0341950bc"),
                            Color = "Black",
                            Description = "Product 16 Description",
                            ImageUrl = "images\\product\\product.png",
                            ListPrice = 45.0,
                            Price = 42.0,
                            Price100 = 38.0,
                            Price50 = 40.0,
                            Size = "M",
                            Title = "Product 16"
                        });
                });

            modelBuilder.Entity("Models.Entities.Concrete.ProductImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Models.Entities.Concrete.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("Models.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b76647d-c501-44c3-91c7-a2bd6843b6e7"),
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("2f514e34-8a22-4e36-aefc-752ba3aa0b34"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("41102f40-1cee-4a61-9add-140d2608b1a5"),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6218c9e-f224-46f1-a38e-08dbc6b81e6e"),
                            AccessFailedCount = 0,
                            Address = "Levent",
                            City = "Istanbul",
                            ConcurrencyStamp = "a5b4ce0d-3189-4b16-a4df-9adbde35b40d",
                            Country = "Turkiye",
                            Email = "superadmin@salemarkt.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Super Admin",
                            NormalizedEmail = "SUPERADMIN@SALEMARKT.COM",
                            NormalizedUserName = "SUPER-ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAECByl9RKmTARk5w1x7F8JgWCAT8zKI9y2s/BaQVHO2pPxMAncULF+44kC7fMz4nnpA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            PostalCode = "34000",
                            SecurityStamp = "LB3ETSAI7Y2TFBWIODGRBQU774ITQI7G",
                            TwoFactorEnabled = false,
                            UserName = "Super-Admin"
                        },
                        new
                        {
                            Id = new Guid("fd91a0bc-13e9-46d0-d3d7-08dbc6b87e76"),
                            AccessFailedCount = 0,
                            Address = "Beşiktaş",
                            City = "Istanbul",
                            ConcurrencyStamp = "156d7eb0-4752-4147-817a-90696985e4d5",
                            Country = "Turkiye",
                            Email = "companyadmin@salemarkt.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Company Admin",
                            NormalizedEmail = "COMPANYADMIN@SALEMARKT.COM",
                            NormalizedUserName = "COMPANY-ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPvC/yQD0wrfDxCYISaEgR2+RfJQcGEJzK2PeseSSyDlpOj9cVEsz9oaCIEGHGw1ag==",
                            PhoneNumber = "0987654321",
                            PhoneNumberConfirmed = false,
                            PostalCode = "34000",
                            SecurityStamp = "BZMCGV4LGIAVLGR4NXGRVTBCBKZNAZRK",
                            TwoFactorEnabled = false,
                            UserName = "Company-Admin"
                        },
                        new
                        {
                            Id = new Guid("ad4c1f6b-f620-41d7-d3d8-08dbc6b87e76"),
                            AccessFailedCount = 0,
                            Address = "Şişli",
                            City = "Istanbul",
                            ConcurrencyStamp = "b124af6f-c7a3-4abc-a917-456602df151d",
                            Country = "Turkiye",
                            Email = "customer@salemarkt.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Company Customer ",
                            NormalizedEmail = "CUSTOMER@SALEMARKT.COM",
                            NormalizedUserName = "COMPANY-CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEPT05PyWYpkO5AqVs4mvyalAB0VPjWhSknJ1HonAod5tewuuD5R9FtW2mO23/21XQ==",
                            PhoneNumber = "1029384756",
                            PhoneNumberConfirmed = false,
                            PostalCode = "34000",
                            SecurityStamp = "PVNIK4FXHMWDXUJSOPGDPO4DPHTHOAM7",
                            TwoFactorEnabled = false,
                            UserName = "Company-Customer"
                        });
                });

            modelBuilder.Entity("Models.Identity.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("ad4c1f6b-f620-41d7-d3d8-08dbc6b87e76"),
                            RoleId = new Guid("41102f40-1cee-4a61-9add-140d2608b1a5")
                        },
                        new
                        {
                            UserId = new Guid("fd91a0bc-13e9-46d0-d3d7-08dbc6b87e76"),
                            RoleId = new Guid("2f514e34-8a22-4e36-aefc-752ba3aa0b34")
                        },
                        new
                        {
                            UserId = new Guid("e6218c9e-f224-46f1-a38e-08dbc6b81e6e"),
                            RoleId = new Guid("2b76647d-c501-44c3-91c7-a2bd6843b6e7")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Models.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Models.Entities.Concrete.OrderHeader", "OrderHeader")
                        .WithMany()
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Entities.Concrete.OrderHeader", b =>
                {
                    b.HasOne("Models.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Models.Entities.Concrete.Product", b =>
                {
                    b.HasOne("Models.Entities.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Models.Entities.Concrete.ProductImage", b =>
                {
                    b.HasOne("Models.Entities.Concrete.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Entities.Concrete.ShoppingCart", b =>
                {
                    b.HasOne("Models.Identity.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Models.Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductImages");
                });
#pragma warning restore 612, 618
        }
    }
}
